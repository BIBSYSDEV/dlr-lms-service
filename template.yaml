AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Lambda for launching DLR in Canvas

Parameters:
  ApiDomain:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: The Api domain
    Default: /NVA/ApiDomain
  DlrApplicationDomain:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: The DLR Application domain
    Default: /NVA/DlrApplicationDomain
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
    Default: lms
  Suffix:
    Type: String
    Default: ''
    Description: Suffix used for naming resources for feature branches to avoid conflicts.

Conditions:
  WithSuffix: !Not [ !Equals [ !Ref Suffix, '' ] ]

Globals:
  Function:
    Timeout: 900
    MemorySize: 1798
    Runtime: java11

Resources:
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup

  LmsCanvasLaunchFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*'
        - PolicyName: SecretPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetResourcePolicy
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:consumerKey*'

  LmsCanvasLaunchFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lms-canvas
      Handler: no.sikt.nva.lms.CanvasLaunchHandler::handleRequest
      Role: !GetAtt LmsCanvasLaunchFunctionRole.Arn
      Environment:
        Variables:
          API_HOST: !Ref ApiDomain
          DLR_BASE_URL: !Ref DlrApplicationDomain
          ALLOWED_ORIGIN: '*'
    Events:
      GetEvent:
        Type: Api
        Properties:
          Path: /lms/lti/canvas/{serviceId}
          Method: get
          RestApiId: !Ref DLRLaunchApi

  DLRLaunchApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      MethodSettings:
        - ResourcePath: /lms/lti/canvas/{serviceId}
          HttpMethod: GET
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        'Fn::Transform':
          Name: AWS::Include
          Parameters:
            Location: ./docs/openapi.yaml

  #===========================BasePathMappings========================================================

  LmsCanvasBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath:
        !If
        - WithSuffix
        - !Sub ${CustomDomainBasePath}-${Suffix}
        - !Sub ${CustomDomainBasePath}
      DomainName: !Ref ApiDomain
      RestApiId: !Ref DLRLaunchApi
      Stage: !Ref DLRLaunchApi.Stage
